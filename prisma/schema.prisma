datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)

  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripeCurrentPeriodEnd DateTime?

  documents Document[]
  accounts  Account[]
  sessions  Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @db.ObjectId
  name     String
  size     Int
  type     String
  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  documentId String @db.ObjectId
  author     Author
  text       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Plan {
  FREE
  PRO
}

enum Author {
  USER
  AI
}
